{"mappings":"AAIsB,IAAlBA,EAAc,ICJH,MACbC,cACEC,KAAKC,WAAa,GAGpBC,QAAQC,GACN,IAAIC,EAAYD,EAAUE,MAAM,KAChC,GAAyB,IAArBD,EAAUE,OAIZ,YAHAC,MACE,wEAIJ,IAAIC,EAAOJ,EAAU,GAAGK,OACpBC,EAAQN,EAAU,GAAGK,OACzB,IAAKD,EAAKG,MAAK,kBAAqBD,EAAMC,MAAK,gBAE7C,YADAJ,MAAM,2DAGR,IAAIK,EAAU,CAAEJ,KAAMA,EAAME,MAAOA,GACnCV,KAAKC,WAAWY,KAAKD,GAGvBE,aACEd,KAAKC,WAAWc,MAAK,CAACC,EAAGC,IAAMD,EAAER,KAAKU,cAAcD,EAAET,QAGxDW,cACEnB,KAAKC,WAAWc,MAAK,CAACC,EAAGC,IAAMD,EAAEN,MAAMQ,cAAcD,EAAEP,SAGzDU,qBACsBC,SAASC,iBAAiB,uBAChCC,SAAQC,IACpB,IAAIpB,EAAYoB,EAAKC,UAAUpB,MAAM,KACjCO,EAAkBR,EAAU,GAA5BQ,EAAuCR,EAAU,GACjDsB,EAAQ1B,KAAKC,WAAW0B,WAC1BC,GAAQA,EAAKpB,OAASI,GAAgBgB,EAAKlB,QAAUE,KAEzC,IAAVc,GACF1B,KAAKC,WAAW4B,OAAOH,EAAO,GAEhCF,EAAKM,YAITC,aAAaC,GAEJA,EAAOC,UAAY,GAE1BjC,KAAKC,WAAWiC,KAAIN,IAEC,IAAfO,EAAKd,SAASe,cAAc,MAChCD,EAAGE,UAAY,YACfF,EAAGG,YAAc,GAAGV,EAAKpB,QAAQoB,EAAKlB,QAGtCsB,EAAcO,sBAAsB,YAAaJ,MAIrDK,cACE,IAAIC,EAAM,YAKV,OAJAzC,KAAKC,WAAWsB,SAAQK,IACtBa,GAAO,uBAAuBb,EAAKpB,2BAA2BoB,EAAKlB,gCAErE+B,GAAO,WACAA,ID5DPC,EAAYrB,SAASsB,eAAe,aACpCC,EAASvB,SAASsB,eAAe,UAGJtB,SAAxBsB,eAAe,aAAaE,iBAAiB,SAAS,KAC7D,IAAIC,EAAaJ,EAAUhC,MAAMD,OACd,KAAfqC,IACFhD,EAAYI,QAAQ4C,GACpBhD,EAAYiC,aAAaa,GACzBF,EAAUhC,MAAQ,OAKcW,SAA3BsB,eAAe,oBAAoBE,iBAAiB,SAAS,KACpE/C,EAAYgB,aACZhB,EAAYiC,aAAaa,MAG3BvB,SAASsB,eAAe,qBAAqBE,iBAAiB,SAAS,KACrE/C,EAAYqB,cACZrB,EAAYiC,aAAaa,MAG3BvB,SAASsB,eAAe,gBAAgBE,iBAAiB,SAAS,KAChE/C,EAAYsB,wBAIiCwB,EAAxCC,iBAAiB,SAAS,SAAUE,GAEX,OAA1BA,EAAMC,OAAOC,UACfF,EAAMC,OAAOE,UAAUC,OAAO,eAKjC,MACC,MAAMC,EAAO,CACXC,aAAchC,SAASiC,cAAc,qBACrCC,cAAelC,SAASiC,cAAc,sBACtCE,MAAOnC,SAASiC,cAAc,gBAC9BG,UAAWpC,SAASiC,cAAc,eAMpC,SAASI,IACP,GAAIN,EAAKI,MAAMN,UAAUS,SAAS,aAAc,CAE9C,IAAIlB,EAAM3C,EAAY0C,cACtBY,EAAKK,UAAUnB,YAAcG,OAG7BW,EAAKK,UAAUnB,YAAc,GAE/Bc,EAAKI,MAAMN,UAAUC,OAAO,aAZ9BC,EAAKC,aAAaR,iBAAiB,QAASa,GAC5CN,EAAKG,cAAcV,iBAAiB,QAASa,IAT9C","sources":["src/index.js","src/js/WordManager.js"],"sourcesContent":["import './css/styles.css';\nimport WordManager from './js/WordManager.js';\n\n// Создаем экземпляр класса\nlet wordManager = new WordManager();\n\n// Получаем ссылку на элементы DOM\nlet inputText = document.getElementById('inputText');\nlet output = document.getElementById('output');\n\n// Обработчик нажатия на кнопку \"Добавить\"\ndocument.getElementById('addButton').addEventListener('click', () => {\n  let inputValue = inputText.value.trim();\n  if (inputValue !== '') {\n    wordManager.addWord(inputValue);\n    wordManager.displayWords(output);\n    inputText.value = ''; // Очищаем поле ввода\n  }\n});\n\n// Обработчики нажатия на кнопки сортировки\ndocument.getElementById('sortByNameButton').addEventListener('click', () => {\n  wordManager.sortByName();\n  wordManager.displayWords(output);\n});\n\ndocument.getElementById('sortByValueButton').addEventListener('click', () => {\n  wordManager.sortByValue();\n  wordManager.displayWords(output);\n});\n\ndocument.getElementById('deleteButton').addEventListener('click', () => {\n  wordManager.deleteSelectedText();\n});\n\n// Добавляем обработчик событий на родительский элемент\noutput.addEventListener('click', function (event) {\n  // Проверяем, что клик был сделан именно по элементу li\n  if (event.target.nodeName === 'LI') {\n    event.target.classList.toggle('selected');\n  }\n});\n\n//Modal\n(() => {\n  const refs = {\n    openModalBtn: document.querySelector('[data-modal-open]'),\n    closeModalBtn: document.querySelector('[data-modal-close]'),\n    modal: document.querySelector('[data-modal]'),\n    xmlOutput: document.querySelector('#xmlOutput'), // new element for displaying XML\n  };\n\n  refs.openModalBtn.addEventListener('click', toggleModal);\n  refs.closeModalBtn.addEventListener('click', toggleModal);\n\n  function toggleModal() {\n    if (refs.modal.classList.contains('is-hidden')) {\n      // If the modal window is hidden, generate XML and add it to the modal window\n      let xml = wordManager.generateXML();\n      refs.xmlOutput.textContent = xml;\n    } else {\n      // If the modal window is open, clear the XML\n      refs.xmlOutput.textContent = '';\n    }\n    refs.modal.classList.toggle('is-hidden');\n  }\n})();\n","export default class WordManager {\n  constructor() {\n    this.wordsArray = [];\n  }\n\n  addWord(inputText) {\n    let wordParts = inputText.split('=');\n    if (wordParts.length !== 2) {\n      alert(\n        'Invalid input format. Please enter data in the format <name>=<value>'\n      );\n      return;\n    }\n    let name = wordParts[0].trim();\n    let value = wordParts[1].trim();\n    if (!name.match(/^[a-z0-9]*$/i) || !value.match(/^[a-z0-9]*$/i)) {\n      alert('Name and value can only contain alphanumeric characters');\n      return;\n    }\n    let wordObj = { name: name, value: value };\n    this.wordsArray.push(wordObj);\n  }\n\n  sortByName() {\n    this.wordsArray.sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  sortByValue() {\n    this.wordsArray.sort((a, b) => a.value.localeCompare(b.value));\n  }\n\n  deleteSelectedText() {\n    let selectedItems = document.querySelectorAll('#output li.selected');\n    selectedItems.forEach(item => {\n      let wordParts = item.innerText.split('=');\n      let wordObj = { name: wordParts[0], value: wordParts[1] };\n      let index = this.wordsArray.findIndex(\n        word => word.name === wordObj.name && word.value === wordObj.value\n      );\n      if (index !== -1) {\n        this.wordsArray.splice(index, 1);\n      }\n      item.remove();\n    });\n  }\n\n  displayWords(outputElement) {\n    // Очищаем outputElement\n    outputElement.innerHTML = '';\n\n    this.wordsArray.map(word => {\n      // Создаем новый элемент li\n      let li = document.createElement('li');\n      li.className = 'list-item';\n      li.textContent = `${word.name}=${word.value}`;\n\n      // Добавляем элемент li в outputElement\n      outputElement.insertAdjacentElement('beforeend', li);\n    });\n  }\n\n  generateXML() {\n    let xml = '<words>\\n';\n    this.wordsArray.forEach(word => {\n      xml += `  <word>\\n    <name>${word.name}</name>\\n    <value>${word.value}</value>\\n  </word>\\n`;\n    });\n    xml += '</words>';\n    return xml;\n  }\n}\n"],"names":["$1f0dc3b9307be026$var$wordManager","constructor","this","wordsArray","addWord","inputText","wordParts","split","length","alert","name","trim","value","match","wordObj","push","sortByName","sort","a","b","localeCompare","sortByValue","deleteSelectedText","document","querySelectorAll","forEach","item","innerText","index","findIndex","word","splice","remove","displayWords","outputElement","innerHTML","map","li","createElement","className","textContent","insertAdjacentElement","generateXML","xml","$1f0dc3b9307be026$var$inputText","getElementById","$1f0dc3b9307be026$var$output","addEventListener","inputValue","event","target","nodeName","classList","toggle","refs","openModalBtn","querySelector","closeModalBtn","modal","xmlOutput","toggleModal","contains"],"version":3,"file":"index.1ddd7d0f.js.map"}