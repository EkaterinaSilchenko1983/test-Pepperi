{"mappings":"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","sources":["node_modules/@swc/helpers/lib/_class_call_check.js","node_modules/@swc/helpers/lib/_create_class.js","src/js/WordManager.js","src/index.js","<<jsx-config-pragma.js>>"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classCallCheck;\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _createClass;\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\n","export default class WordManager {\n  constructor() {\n    this.wordsArray = [];\n  }\n\n  addWord(inputText) {\n    let wordParts = inputText.split('=');\n    if (wordParts.length !== 2) {\n      alert(\n        'Invalid input format. Please enter data in the format <name>=<value>'\n      );\n      return;\n    }\n    let name = wordParts[0].trim();\n    let value = wordParts[1].trim();\n    if (!name.match(/^[a-z0-9]*$/i) || !value.match(/^[a-z0-9]*$/i)) {\n      alert('Name and value can only contain alphanumeric characters');\n      return;\n    }\n    let wordObj = { name: name, value: value };\n    this.wordsArray.push(wordObj);\n  }\n\n  sortByName() {\n    this.wordsArray.sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  sortByValue() {\n    this.wordsArray.sort((a, b) => a.value.localeCompare(b.value));\n  }\n\n  deleteSelectedText() {\n    let selectedItems = document.querySelectorAll('#output li.selected');\n    selectedItems.forEach(item => {\n      let wordParts = item.innerText.split('=');\n      let wordObj = { name: wordParts[0], value: wordParts[1] };\n      let index = this.wordsArray.findIndex(\n        word => word.name === wordObj.name && word.value === wordObj.value\n      );\n      if (index !== -1) {\n        this.wordsArray.splice(index, 1);\n      }\n      item.remove();\n    });\n  }\n\n  displayWords(outputElement) {\n    // Clear outputElement\n    outputElement.innerHTML = '';\n\n    this.wordsArray.map(word => {\n      // Create new element li\n      let li = document.createElement('li');\n      li.className = 'list-item';\n      li.textContent = `${word.name}=${word.value}`;\n\n      // Add li in outputElement(list ul)\n      outputElement.insertAdjacentElement('beforeend', li);\n    });\n  }\n\n  generateXML() {\n    let xml = '<words>\\n';\n    this.wordsArray.forEach(word => {\n      xml += `  <word>\\n    <name>${word.name}</name>\\n    <value>${word.value}</value>\\n  </word>\\n`;\n    });\n    xml += '</words>';\n    return xml;\n  }\n}\n","import './css/styles.css';\nimport WordManager from './js/WordManager.js';\n\n// Create an instance of the class\nlet wordManager = new WordManager();\n\n// Get references to DOM elements\nlet inputText = document.getElementById('inputText');\nlet output = document.getElementById('output');\n\n// Handler for the \"Add\" button click\ndocument.getElementById('addButton').addEventListener('click', () => {\n  let inputValue = inputText.value.trim();\n  if (inputValue !== '') {\n    wordManager.addWord(inputValue);\n    wordManager.displayWords(output);\n    inputText.value = ''; // Очищаем поле ввода\n  }\n});\n\n// Handlers for the sorting buttons click\ndocument.getElementById('sortByNameButton').addEventListener('click', () => {\n  wordManager.sortByName();\n  wordManager.displayWords(output);\n});\n\ndocument.getElementById('sortByValueButton').addEventListener('click', () => {\n  wordManager.sortByValue();\n  wordManager.displayWords(output);\n});\n\ndocument.getElementById('deleteButton').addEventListener('click', () => {\n  wordManager.deleteSelectedText();\n});\n\n// Add an event handler to the parent element\noutput.addEventListener('click', function (event) {\n  // Check  li element\n  if (event.target.nodeName === 'LI') {\n    event.target.classList.toggle('selected');\n  }\n});\n\n//Modal\n(() => {\n  const refs = {\n    openModalBtn: document.querySelector('[data-modal-open]'),\n    closeModalBtn: document.querySelector('[data-modal-close]'),\n    modal: document.querySelector('[data-modal]'),\n    xmlOutput: document.querySelector('#xmlOutput'), // new element for displaying XML\n  };\n\n  refs.openModalBtn.addEventListener('click', toggleModal);\n  refs.closeModalBtn.addEventListener('click', toggleModal);\n\n  function toggleModal() {\n    if (refs.modal.classList.contains('is-hidden')) {\n      // If the modal window is hidden, generate XML and add it to the modal window\n      let xml = wordManager.generateXML();\n      refs.xmlOutput.textContent = xml;\n    } else {\n      // If the modal window is open, clear the XML\n      refs.xmlOutput.textContent = '';\n    }\n    refs.modal.classList.toggle('is-hidden');\n  }\n})();\n",null],"names":["Object","defineProperty","$665014edacbfe17b$exports","value","default","instance","Constructor","TypeError","$74e7f8130373505f$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","$74e7f8130373505f$exports","protoProps","staticProps","prototype","$b8f9b7833fa37166$var$wordManager","WordManager","this","wordsArray","inputText","wordParts","split","name","trim","match","wordObj","push","alert","sort","a","b","localeCompare","document","querySelectorAll","forEach","item","innerText","index","_this","findIndex","word","splice","remove","outputElement","innerHTML","map","li","createElement","className","textContent","concat","insertAdjacentElement","xml","$b8f9b7833fa37166$var$inputText","getElementById","$b8f9b7833fa37166$var$output","addEventListener","inputValue","addWord","displayWords","sortByName","sortByValue","deleteSelectedText","event","nodeName","classList","toggle","refs","openModalBtn","querySelector","closeModalBtn","modal","xmlOutput","toggleModal","contains","generateXML"],"version":3,"file":"index.14a99227.js.map"}